# This is the file that Capistrano uses to get our code onto the servers
# See http://capify.org for more info

require 'bundler/capistrano'
require 'capistrano/ext/multistage'

# capistrano-ext lets you configure for multiple environments, see config/deploy/qa.rb
set :stages, %w(dev)
set :default_stage, 'dev'

# RVM helpers
# set :rvm_ruby_string, '1.9.3-p125@trainer2'        # Or whatever env you want it to run in.
# $:.unshift(File.expand_path('./lib', ENV['rvm_path'])) # Add RVM's lib directory to the load path.
require "rvm/capistrano"                      # Load RVM's capistrano plugin.
set :rvm_type, :system
set :rvm_bin_path, '/usr/local/rvm/bin'

# Okay, start defining our application
set :application, 'hashiru'

# svn repo setup
set :deploy_via, :copy
set :copy_exclude, [".git/*", ".DS_Store"]
set :copy_strategy, :export
set :deploy_to, "/var/www"
set :shared_path, "/var/shared"

# gitorious setup
set :repository, 'git@github.com:NateBarnes/hashiru.git'
set :scm, 'git'
#set :git_shallow_clone, 1
set :use_sudo, false
set :user, 'ubuntu'
set :ssh_options, { :forward_agent => true }
ssh_options[:keys] = [File.join(ENV["HOME"], ".ssh", "id_rsa")]   # use this if you put your public key on the server

# local tar method for OSX
set :copy_local_tar, "/usr/bin/gnutar" if `uname` =~ /Darwin/

# for RVM
set :rvm_install_with_sudo, true

namespace :deploy do

  desc "Make the user confirm the environment we\'re using"
  task :confirm do
    puts "\n\n*************************************\nYou are about to deploy to #{rails_env.upcase}, are you sure???\n*************************************"
    set :answer, Capistrano::CLI.ui.ask("Type 'yes' to continue: ")
    exit unless answer.downcase == 'yes'
  end

  namespace :sass do
    desc 'Updates the stylesheets generated by Sass'
    task :update, :roles => :web do
      run "rake -f #{release_path}/Rakefile sass:update RAILS_ENV=#{rails_env}"
    end
  end

  desc "Start application instances"
  task :start, :roles => :web do
    run "cd #{current_path} && bundle exec unicorn -E #{rails_env} -c config/unicorn.rb -D"
  end

  desc "Stop application instances"
  task :stop, :roles => :web do
    run "kill -QUIT `cat #{current_path}/tmp/pids/unicorn.pid`"
  end

  desc "Restart application instances"
  task :restart, :roles => :web do
    # run "#{try_sudo} touch #{File.join(current_path,'tmp','restart.txt')}"
    run "touch #{File.join(current_path,'tmp','restart.txt')}"
  end

  desc "Requests the homepage, thus forcing the cached JS and CSS to build"
  task :build_cached_js_and_css, :roles => :web do
    run "rake -f #{release_path}/Rakefile assets:generate_cached_assets RAILS_ENV=#{rails_env}"
  end

  desc "Link uploads folder"
  task :link_uploads, :roles => :web do
    run "cd #{current_path}/public/ && ln -s #{shared_path}/uploads #{current_path}/public"
  end
end

# Tasks for the web server (nginx)

namespace :web do

  desc 'Serve up a custom maintenance page'
  task :disable, :roles => :web do
    require 'erb'
    on_rollback { run "rm #{current_path}/public/maintenance.html" }

    reason = ENV['REASON'] || nil
    deadline = ENV['UNTIL'] || nil

    template = File.read("app/views/layouts/maintenance.html.erb")
    page = ERB.new(template).result(binding)

    put page, "#{current_path}/public/maintenance.html", :mode => 0644
  end

  desc 'Remove maintence page'
  task :enable, :roles => :web do
     run "rm #{current_path}/public/maintenance.html"
  end

  desc "Start web server"
  task :start, :roles => :web do
    sudo "/etc/init.d/nginx start"
  end

  desc "Stop web server"
  task :stop, :roles => :web do
    sudo "/etc/init.d/nginx stop"
  end

  desc "Restart web server"
  task :restart, :roles => :web do
    sudo "/etc/init.d/nginx restart"
  end

end

namespace :admin do
  desc <<-DESC
    Restart the whole server. USE WITH CAUTION!!
  DESC
  task :restart, :roles => :app do
    sudo "shutdown -r now"
  end
end


#
# Custom task flow
#

# only used when setting up a new server
before 'deploy:setup',      'rvm:install_rvm'
before 'deploy:setup',      'rvm:install_ruby'
after 'deploy:setup',       'deploy:config_setup'
#
# cleanup old releases (keep the last 5)
after 'deploy',             'deploy:cleanup'
after 'deploy:migrations',  'deploy:cleanup'

